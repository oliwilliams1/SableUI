#include "SableUI/SableUI.h"

int main(int argc, char** argv)
{
	// Generated by gemini for testing the api
	SableUI::Window mainWindow("SableUI Layout Test", 1600, 1000);

	// --- Root Node's direct children: A main VSPLITTER and a new HSPLITTER for more content ---
	// This creates two main vertical "columns" or sections at the root level.
	SableUI::Node* rootHSplitter = mainWindow.AddNodeToParent(SableUI::NodeType::HSPLITTER, "RootHSplitter", "Root Node");
	if (rootHSplitter)
	{
		mainWindow.AttachComponentToNode("RootHSplitter", std::make_unique<SableUI::SplitterComponent>(SableUI::Colour(51, 51, 51)));
		mainWindow.SetupSplitter("RootHSplitter", 2.0f); // A slightly thicker splitter for main division

		// Left side of RootHSplitter: Your original main VSplitter structure
		SableUI::Node* vsplitter1 = mainWindow.AddNodeToParent(SableUI::NodeType::VSPLITTER, "MainVSplitter", "RootHSplitter");
		if (vsplitter1)
		{
			mainWindow.AttachComponentToNode("MainVSplitter", std::make_unique<SableUI::SplitterComponent>(SableUI::Colour(51, 51, 51)));
			mainWindow.SetupSplitter("MainVSplitter", 1.0f);

			SableUI::Node* hsplitter1 = mainWindow.AddNodeToParent(SableUI::NodeType::HSPLITTER, "TopHSplitter", "MainVSplitter");
			if (hsplitter1)
			{
				mainWindow.AttachComponentToNode("TopHSplitter", std::make_unique<SableUI::SplitterComponent>(SableUI::Colour(51, 51, 51)));
				mainWindow.SetupSplitter("TopHSplitter", 1.0f);

				mainWindow.AddNodeToParent(SableUI::NodeType::COMPONENT, "TopLeftComponent", "TopHSplitter");
				mainWindow.AttachComponentToNode("TopLeftComponent", std::make_unique<SableUI::DefaultComponent>(SableUI::Colour(32, 32, 32)));

				SableUI::Node* vsplitter2 = mainWindow.AddNodeToParent(SableUI::NodeType::VSPLITTER, "NestedVSplitter", "TopHSplitter");
				if (vsplitter2)
				{
					mainWindow.AttachComponentToNode("NestedVSplitter", std::make_unique<SableUI::SplitterComponent>(SableUI::Colour(51, 51, 51)));
					mainWindow.SetupSplitter("NestedVSplitter", 1.0f);

					mainWindow.AddNodeToParent(SableUI::NodeType::COMPONENT, "NestedTopComponent", "NestedVSplitter");
					mainWindow.AttachComponentToNode("NestedTopComponent", std::make_unique<SableUI::DefaultComponent>(SableUI::Colour(32, 32, 32)));

					SableUI::Node* hsplitter2 = mainWindow.AddNodeToParent(SableUI::NodeType::HSPLITTER, "NestedHSplitter", "NestedVSplitter");
					if (hsplitter2)
					{
						mainWindow.AttachComponentToNode("NestedHSplitter", std::make_unique<SableUI::SplitterComponent>(SableUI::Colour(51, 51, 51)));
						mainWindow.SetupSplitter("NestedHSplitter", 1.0f);

						mainWindow.AddNodeToParent(SableUI::NodeType::COMPONENT, "NestedBottomLeftComponent", "NestedHSplitter");
						mainWindow.AttachComponentToNode("NestedBottomLeftComponent", std::make_unique<SableUI::DefaultComponent>(SableUI::Colour(32, 32, 32)));

						mainWindow.AddNodeToParent(SableUI::NodeType::COMPONENT, "NestedBottomRightComponent", "NestedHSplitter");
						mainWindow.AttachComponentToNode("NestedBottomRightComponent", std::make_unique<SableUI::DefaultComponent>(SableUI::Colour(32, 32, 32)));
					}
				}
			}

			mainWindow.AddNodeToParent(SableUI::NodeType::COMPONENT, "MainBottomComponent", "MainVSplitter");
			mainWindow.AttachComponentToNode("MainBottomComponent", std::make_unique<SableUI::DefaultComponent>(SableUI::Colour(32, 32, 32)));
		}

		// Right side of RootHSplitter: A brand new VSplitter branch
		SableUI::Node* rightVSplitter = mainWindow.AddNodeToParent(SableUI::NodeType::VSPLITTER, "RightVSplitter", "RootHSplitter");
		if (rightVSplitter)
		{
			mainWindow.AttachComponentToNode("RightVSplitter", std::make_unique<SableUI::SplitterComponent>(SableUI::Colour(51, 51, 51)));
			mainWindow.SetupSplitter("RightVSplitter", 1.0f);

			// Component at the top of the right VSplitter
			mainWindow.AddNodeToParent(SableUI::NodeType::COMPONENT, "RightTopComponent", "RightVSplitter");
			mainWindow.AttachComponentToNode("RightTopComponent", std::make_unique<SableUI::DefaultComponent>(SableUI::Colour(40, 40, 40)));

			// Component at the bottom of the right VSplitter
			mainWindow.AddNodeToParent(SableUI::NodeType::COMPONENT, "RightBottomComponent", "RightVSplitter");
			mainWindow.AttachComponentToNode("RightBottomComponent", std::make_unique<SableUI::DefaultComponent>(SableUI::Colour(40, 40, 40)));
		}
	}

	// --- Adding Elements to Components ---

	// TopLeftComponent: Mix of RECT, IMAGE, TEXT, and DIVs
	{
		SableUI::ElementInfo info{};

		// A fixed-height DIV at the top
		info.name = "TopDiv_TopLeft";
		info.hType = SableUI::RectType::FIXED;
		info.height = 50.0f;
		info.bgColour = SableUI::Colour(60, 60, 60);
		info.padding = 4.0f;
		SableUI::Element* topDiv = mainWindow.AddElementToComponent("TopLeftComponent", info, SableUI::ElementType::RECT);
		if (topDiv)
		{
			info.name = "TopDivText";
			SableUI::Element* textEl = mainWindow.AddElementToElement(topDiv->name, info, SableUI::ElementType::TEXT);
			textEl->SetText(U"Top Bar Content", 16);
		}

		SableUI::ElementInfo el1{};
		el1.name = "element 1";
		el1.hType = SableUI::RectType::FIXED;
		el1.height = 20.0f;
		el1.bgColour = SableUI::Colour(255, 0, 0);
		mainWindow.AddElementToComponent("TopLeftComponent", el1, SableUI::ElementType::RECT);

		SableUI::ElementInfo el2{};
		el2.name = "element 2";
		el2.bgColour = SableUI::Colour(255, 0, 255);
		el2.padding = 5.0f;
		mainWindow.AddElementToComponent("TopLeftComponent", el2, SableUI::ElementType::RECT);

		info.name = "ImageContainerDiv";
		info.hType = SableUI::RectType::FIXED;
		info.height = 250.0f; // Adjusted height for image container to be more compact
		info.bgColour = SableUI::Colour(45, 45, 45);
		info.padding = 5.0f;
		info.layoutDirection = SableUI::LayoutDirection::HORIZONTAL;

		SableUI::Element* imgDiv = mainWindow.AddElementToComponent("TopLeftComponent", info, SableUI::ElementType::RECT);
		if (imgDiv)
		{
			SableUI::ElementInfo imgInfo{};
			imgInfo.wType = SableUI::RectType::FIXED;
			imgInfo.hType = SableUI::RectType::FIXED;
			imgInfo.padding = 5.0f;
			imgInfo.centerX = true; // Centered images
			imgInfo.width = 120.0f;
			imgInfo.height = 120.0f;

			SableUI::Element* imageElement = mainWindow.AddElementToElement(imgDiv->name, imgInfo, SableUI::ElementType::IMAGE);
			imageElement->SetImage("dirtywork.jpg");

			SableUI::Element* imageElement1 = mainWindow.AddElementToElement(imgDiv->name, imgInfo, SableUI::ElementType::IMAGE);
			imageElement1->SetImage("bomb.webp");
		}

		SableUI::ElementInfo el5{};
		SableUI::Element* textElement1 = mainWindow.AddElementToComponent("TopLeftComponent", el5, SableUI::ElementType::TEXT);
		textElement1->SetText(U"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. | (#♥) | (＜★) | 이브 프시케 カタカナ 漢字 ひらがな พยัญชนะ 汉字 स्वर äöüçñæ 生而平等 ¿ 😔", 14);
	}

	// NestedTopComponent: A simple DIV with text, now also with a nested fixed-size rect
	{
		SableUI::ElementInfo info{};
		info.name = "NestedTopDiv";
		info.bgColour = SableUI::Colour(50, 50, 50);
		info.padding = 10.0f;
		SableUI::Element* nestedTopDiv = mainWindow.AddElementToComponent("NestedTopComponent", info, SableUI::ElementType::RECT);
		if (nestedTopDiv)
		{
			info.name = "NestedTopDivText";
			SableUI::Element* textEl = mainWindow.AddElementToElement(nestedTopDiv->name, info, SableUI::ElementType::TEXT);
			textEl->SetText(U"Nested Top Content", 18);

			info.name = "SmallFixedRect";
			info.wType = SableUI::RectType::FIXED;
			info.hType = SableUI::RectType::FIXED;
			info.width = 50.0f;
			info.height = 50.0f;
			info.bgColour = SableUI::Colour(0, 150, 0);
			info.centerX = true;
			info.padding = 0.0f;
			mainWindow.AddElementToElement(nestedTopDiv->name, info, SableUI::ElementType::RECT);
		}
	}

	// NestedBottomLeftComponent: Multiple DIVs and a button (RECT with text), now with more dynamic content
	{
		SableUI::ElementInfo info{};
		info.hType = SableUI::RectType::FIXED;
		info.height = 40.0f;
		info.bgColour = SableUI::Colour(70, 70, 70);
		info.padding = 5.0f;

		SableUI::Element* headerDiv = mainWindow.AddElementToComponent("NestedBottomLeftComponent", info, SableUI::ElementType::RECT);
		if (headerDiv)
		{
			info.name = "HeaderDivText";
			SableUI::Element* textEl = mainWindow.AddElementToElement(headerDiv->name, info, SableUI::ElementType::TEXT);
			textEl->SetText(U"User Controls", 16);
		}

		info.name = "ButtonDiv";
		info.wType = SableUI::RectType::FIXED;
		info.height = 30.0f;
		info.width = 100.0f;
		info.bgColour = SableUI::Colour(0, 120, 215); // Blue button
		info.padding = 5.0f;
		info.centerX = true;
		info.centerY = false;
		SableUI::Element* buttonDiv = mainWindow.AddElementToComponent("NestedBottomLeftComponent", info, SableUI::ElementType::RECT);
		if (buttonDiv)
		{
			info.name = "ButtonText";
			SableUI::Element* textEl = mainWindow.AddElementToElement(buttonDiv->name, info, SableUI::ElementType::TEXT);
			textEl->SetText(U"Click Me", 14);
		}

		// A fill div with more content
		info.name = "FillDiv_NestedBottomLeft";
		info.bgColour = SableUI::Colour(40, 40, 40);
		info.padding = 10.0f;
		SableUI::Element* fillDivNBL = mainWindow.AddElementToComponent("NestedBottomLeftComponent", info, SableUI::ElementType::RECT);
		if (fillDivNBL)
		{
			info.name = "ContentTextNBL";
			SableUI::Element* textEl = mainWindow.AddElementToElement(fillDivNBL->name, info, SableUI::ElementType::TEXT);
			textEl->SetText(U"This is some dynamic content inside the bottom-left pane. It should expand and contract with the window.", 12);

			info.name = "AnotherFixedDivNBL";
			info.wType = SableUI::RectType::FIXED;
			info.hType = SableUI::RectType::FIXED;
			info.width = 80.0f;
			info.height = 25.0f;
			info.bgColour = SableUI::Colour(200, 100, 0);
			info.centerX = true;
			info.padding = 2.0f;
			SableUI::Element* anotherDiv = mainWindow.AddElementToElement(fillDivNBL->name, info, SableUI::ElementType::RECT);
			if (anotherDiv)
			{
				info.name = "AnotherFixedDivTextNBL";
				SableUI::Element* textEl = mainWindow.AddElementToElement(anotherDiv->name, info, SableUI::ElementType::TEXT);
				textEl->SetText(U"Fixed Item", 10);
			}
		}
	}

	// NestedBottomRightComponent: Nested DIVs with various backgrounds
	{
		SableUI::ElementInfo info{};

		// Outer DIV
		info.name = "OuterDiv_NestedBottomRight";
		info.bgColour = SableUI::Colour(20, 20, 20);
		info.padding = 15.0f;
		SableUI::Element* outerDiv = mainWindow.AddElementToComponent("NestedBottomRightComponent", info, SableUI::ElementType::RECT);

		if (outerDiv)
		{
			// Inner DIV 1 (fixed size)
			info.name = "InnerDiv1";
			info.wType = SableUI::RectType::FIXED;
			info.hType = SableUI::RectType::FIXED;
			info.width = 200.0f;
			info.height = 100.0f;
			info.bgColour = SableUI::Colour(80, 80, 80);
			info.padding = 10.0f;
			info.centerX = true;
			SableUI::Element* innerDiv1 = mainWindow.AddElementToElement(outerDiv->name, info, SableUI::ElementType::RECT);
			if (innerDiv1)
			{
				info.name = "InnerDiv1Text";
				SableUI::Element* textEl = mainWindow.AddElementToElement(innerDiv1->name, info, SableUI::ElementType::TEXT);
				textEl->SetText(U"Fixed Size Div", 16);
			}

			// Inner DIV 2 (fill size)
			info.name = "InnerDiv2";
			info.bgColour = SableUI::Colour(60, 60, 60);
			info.padding = 10.0f;
			SableUI::Element* innerDiv2 = mainWindow.AddElementToElement(outerDiv->name, info, SableUI::ElementType::RECT);
			if (innerDiv2)
			{
				info.name = "InnerDiv2Text";
				SableUI::Element* textEl = mainWindow.AddElementToElement(innerDiv2->name, info, SableUI::ElementType::TEXT);
				textEl->SetText(U"Flexible Div", 16);

				// Deeply nested DIV inside InnerDiv2
				info.name = "DeepNestedDiv";
				info.wType = SableUI::RectType::FIXED;
				info.hType = SableUI::RectType::FIXED;
				info.width = 80.0f;
				info.height = 80.0f;
				info.bgColour = SableUI::Colour(255, 50, 50);
				info.padding = 5.0f;
				info.centerX = true;
				SableUI::Element* deepDiv = mainWindow.AddElementToElement(innerDiv2->name, info, SableUI::ElementType::RECT);
				if (deepDiv) {
					info.name = "DeepNestedDivText";
					SableUI::Element* textEl = mainWindow.AddElementToElement(deepDiv->name, info, SableUI::ElementType::TEXT);
					textEl->SetText(U"Deep", 12);
				}
			}
		}
	}

	// MainBottomComponent: A simple div to contain a progress bar (another div) and some text
	{
		SableUI::ElementInfo info{};
		info.name = "ProgressBarContainer";
		info.hType = SableUI::RectType::FIXED;
		info.height = 50.0f;
		info.bgColour = SableUI::Colour(40, 40, 40);
		info.padding = 10.0f;
		SableUI::Element* progressBarContainer = mainWindow.AddElementToComponent("MainBottomComponent", info, SableUI::ElementType::RECT);

		if (progressBarContainer)
		{
			info.name = "ProgressBar";
			info.wType = SableUI::RectType::FIXED;
			info.width = 250.0f;
			info.bgColour = SableUI::Colour(0, 180, 0);
			info.padding = 0.0f;
			mainWindow.AddElementToElement(progressBarContainer->name, info, SableUI::ElementType::RECT);
		}

		info.name = "MainBottomFillDiv";
		info.bgColour = SableUI::Colour(50, 50, 50);
		info.padding = 10.0f;
		SableUI::Element* mainBottomFillDiv = mainWindow.AddElementToComponent("MainBottomComponent", info, SableUI::ElementType::RECT);
		if (mainBottomFillDiv)
		{
			info.name = "StatusText";
			SableUI::Element* textEl = mainWindow.AddElementToElement(mainBottomFillDiv->name, info, SableUI::ElementType::TEXT);
			textEl->SetText(U"Application Status: Running...", 15);
		}
	}

	// --- New Elements for RightTopComponent (top-right pane) ---
	{
		SableUI::ElementInfo info{};
		info.name = "RightTopHeader";
		info.hType = SableUI::RectType::FIXED;
		info.height = 50.0f;
		info.bgColour = SableUI::Colour(70, 70, 90);
		info.padding = 10.0f;
		SableUI::Element* header = mainWindow.AddElementToComponent("RightTopComponent", info, SableUI::ElementType::RECT);
		if (header)
		{
			info.name = "RightTopHeaderText";
			SableUI::Element* textEl = mainWindow.AddElementToElement(header->name, info, SableUI::ElementType::TEXT);
			textEl->SetText(U"Right Panel: Settings & Options", 20);
		}

		info.name = "SettingsContainer";
		info.bgColour = SableUI::Colour(35, 35, 35);
		info.padding = 10.0f;
		SableUI::Element* settingsDiv = mainWindow.AddElementToComponent("RightTopComponent", info, SableUI::ElementType::RECT);
		if (settingsDiv)
		{
			// Setting 1: Checkbox (represented by a small rect + text)
			info.name = "Setting1Div";
			info.hType = SableUI::RectType::FIXED;
			info.height = 30.0f;
			info.bgColour = SableUI::Colour(45, 45, 45);
			info.padding = 5.0f;
			SableUI::Element* setting1 = mainWindow.AddElementToElement(settingsDiv->name, info, SableUI::ElementType::RECT);
			if (setting1)
			{
				info.name = "Checkbox1";
				info.wType = SableUI::RectType::FIXED;
				info.hType = SableUI::RectType::FIXED;
				info.width = 20.0f;
				info.height = 20.0f;
				info.bgColour = SableUI::Colour(100, 100, 100);
				info.padding = 2.0f; // For a checked state indicator
				info.centerY = true;
				SableUI::Element* checkbox = mainWindow.AddElementToElement(setting1->name, info, SableUI::ElementType::RECT);
				if (checkbox)
				{
					// Inner "check" mark
					info.name = "CheckMark1";
					info.bgColour = SableUI::Colour(0, 200, 0); // Green if checked
					mainWindow.AddElementToElement(checkbox->name, info, SableUI::ElementType::RECT);
				}
				info.name = "Setting1Text";
				SableUI::Element* textEl = mainWindow.AddElementToElement(setting1->name, info, SableUI::ElementType::TEXT);
				textEl->SetText(U"Enable Feature A", 14);
			}

			// Setting 2: Text input field (represented by two rects + text)
			info.name = "Setting2Div";
			info.hType = SableUI::RectType::FIXED;
			info.height = 30.0f;
			info.bgColour = SableUI::Colour(45, 45, 45);
			info.padding = 5.0f;
			SableUI::Element* setting2 = mainWindow.AddElementToElement(settingsDiv->name, info, SableUI::ElementType::RECT);
			if (setting2)
			{
				info.name = "Setting2Label";
				info.wType = SableUI::RectType::FIXED;
				info.width = 100.0f;
				SableUI::Element* label = mainWindow.AddElementToElement(setting2->name, info, SableUI::ElementType::TEXT);
				label->SetText(U"Username:", 14);
			}
		}
	}

	// --- New Elements for RightBottomComponent (bottom-right pane) ---
	{
		SableUI::ElementInfo info{};
		info.name = "ConsoleOutputHeader";
		info.hType = SableUI::RectType::FIXED;
		info.height = 40.0f;
		info.bgColour = SableUI::Colour(80, 60, 60);
		SableUI::Element* header = mainWindow.AddElementToComponent("RightBottomComponent", info, SableUI::ElementType::RECT);
		if (header)
		{
			info.name = "ConsoleOutputHeaderText";
			SableUI::Element* textEl = mainWindow.AddElementToElement(header->name, info, SableUI::ElementType::TEXT);
			textEl->SetText(U"Console Output", 18);
		}

		info.name = "ConsoleLogDiv";
		info.bgColour = SableUI::Colour(15, 15, 15);
		info.hType = SableUI::RectType::FILL;
		SableUI::Element* consoleLogDiv = mainWindow.AddElementToComponent("RightBottomComponent", info, SableUI::ElementType::RECT);
		if (consoleLogDiv)
		{
			info.hType = SableUI::RectType::UNDEF;
			// Multiple log lines
			info.name = "LogLine1";
			SableUI::Element* log1 = mainWindow.AddElementToElement(consoleLogDiv->name, info, SableUI::ElementType::TEXT);
			log1->SetText(U"[INFO] Application started successfully.", 12, 1.0f);

			info.name = "LogLine2";
			SableUI::Element* log2 = mainWindow.AddElementToElement(consoleLogDiv->name, info, SableUI::ElementType::TEXT);
			log2->SetText(U"[WARN] Resource 'texture.png' not found, using default.", 12, 1.0f);

			info.name = "LogLine3";
			SableUI::Element* log3 = mainWindow.AddElementToElement(consoleLogDiv->name, info, SableUI::ElementType::TEXT);
			log3->SetText(U"[ERROR] Failed to connect to server: Connection timed out.", 12, 1.0f);

			info.name = "LogLine4";
			SableUI::Element* log4 = mainWindow.AddElementToElement(consoleLogDiv->name, info, SableUI::ElementType::TEXT);
			log4->SetText(U"[DEBUG] User input processed. Render loop active. FPS: 60.", 12, 1.0f);
		}
	}

	// --- Main Loop ---
	while (mainWindow.PollEvents())
	{
		mainWindow.Draw();
	}

	return 0;
}