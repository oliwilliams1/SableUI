#include "SableUI/SableUI.h"

class BaseComponent
{
public:
	BaseComponent(const SableUI::Body* body) : body(body) {};
	~BaseComponent() {};

	virtual void Init() = 0;

private:
	const SableUI::Body* body = nullptr;
};

#define VSPLITTER SableUI::NodeType::VSPLITTER
#define HSPLITTER SableUI::NodeType::HSPLITTER
#define COMPONENT SableUI::NodeType::COMPONENT
#define Colour SableUI::Colour
#define Color SableUI::Colour

int main(int argc, char** argv)
{
    // Generated by gemini for testing the api
    SableUI::Window mainWindow("SableUI Layout Test", 1600, 1000);

    // Root = nullptr
    SableUI::Node* rootHSplitter = mainWindow.AddNodeToParent("RootHSplitter", nullptr, HSPLITTER)->AttachSplitter(Colour(51, 51, 51), 2);
    if (rootHSplitter)
    {
        // Left side of RootHSplitter: Your original main VSplitter structure
        SableUI::Node* vsplitter1 = mainWindow.AddNodeToParent("MainVSplitter", rootHSplitter, VSPLITTER)->AttachSplitter(Colour(51, 51, 51), 1);
        if (vsplitter1)
        {
            // Adding TopHSplitter with splitter attachment
            SableUI::Node* hsplitter1 = mainWindow.AddNodeToParent("TopHSplitter", vsplitter1, HSPLITTER)->AttachSplitter(Colour(51, 51, 51), 1);
            if (hsplitter1)
            {
                mainWindow.AddNodeToParent("TopLeftComponent", hsplitter1, COMPONENT)->AttachBase(Colour(32, 32, 32));

                // Adding NestedVSplitter with splitter attachment
                SableUI::Node* vsplitter2 = mainWindow.AddNodeToParent("NestedVSplitter", hsplitter1, VSPLITTER)->AttachSplitter(Colour(51, 51, 51), 1);
                if (vsplitter2)
                {
                    mainWindow.AddNodeToParent("NestedTopComponent", vsplitter2, COMPONENT)->AttachBase(Colour(32, 32, 32));

                    // Adding NestedHSplitter with splitter attachment
                    SableUI::Node* hsplitter2 = mainWindow.AddNodeToParent("NestedHSplitter", vsplitter2, HSPLITTER)->AttachSplitter(Colour(51, 51, 51), 1);
                    if (hsplitter2)
                    {
                        mainWindow.AddNodeToParent("NestedBottomLeftComponent", hsplitter2, COMPONENT)->AttachBase(Colour(32, 32, 32));

                        mainWindow.AddNodeToParent("NestedBottomRightComponent", hsplitter2, COMPONENT)->AttachBase(Colour(32, 32, 32));
                    }
                }
            }

            // Adding MainBottomComponent with splitter attachment
            mainWindow.AddNodeToParent("MainBottomComponent", vsplitter1, COMPONENT)->AttachBase(Colour(32, 32, 32));
        }

        // Right side of RootHSplitter: A brand new VSplitter branch
        SableUI::Node* rightVSplitter = mainWindow.AddNodeToParent("RightVSplitter", rootHSplitter, VSPLITTER)->AttachSplitter(Colour(51, 51, 51), 1);
        if (rightVSplitter)
        {
            // Component at the top of the right VSplitter
            mainWindow.AddNodeToParent("RightTopComponent", rightVSplitter, COMPONENT)->AttachBase(Colour(40, 40, 40));

            // Component at the bottom of the right VSplitter
            mainWindow.AddNodeToParent("RightBottomComponent", rightVSplitter, COMPONENT)->AttachBase(Colour(40, 40, 40));
        }
    }

	// --- Main Loop ---
	while (mainWindow.PollEvents())
	{
		mainWindow.Draw();
	}

	return 0;
}