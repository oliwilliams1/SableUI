#include "SableUI/SableUI.h"

int main(int argc, char** argv)
{
	// Generated by gemini for testing the api
	SableUI::Window mainWindow("SableUI Layout Test", 1600, 1000);

	// --- Root Node's direct children: A main VSPLITTER and a new HSPLITTER for more content ---
	// This creates two main vertical "columns" or sections at the root level.
	SableUI::Node* rootHSplitter = mainWindow.AddNodeToParent(SableUI::NodeType::HSPLITTER, "RootHSplitter", "Root Node");
	if (rootHSplitter)
	{
		mainWindow.AttachComponentToNode("RootHSplitter", std::make_unique<SableUI::SplitterComponent>(SableUI::Colour(51, 51, 51)));
		mainWindow.SetupSplitter("RootHSplitter", 2.0f); // A slightly thicker splitter for main division

		// Left side of RootHSplitter: Your original main VSplitter structure
		SableUI::Node* vsplitter1 = mainWindow.AddNodeToParent(SableUI::NodeType::VSPLITTER, "MainVSplitter", "RootHSplitter");
		if (vsplitter1)
		{
			mainWindow.AttachComponentToNode("MainVSplitter", std::make_unique<SableUI::SplitterComponent>(SableUI::Colour(51, 51, 51)));
			mainWindow.SetupSplitter("MainVSplitter", 1.0f);

			SableUI::Node* hsplitter1 = mainWindow.AddNodeToParent(SableUI::NodeType::HSPLITTER, "TopHSplitter", "MainVSplitter");
			if (hsplitter1)
			{
				mainWindow.AttachComponentToNode("TopHSplitter", std::make_unique<SableUI::SplitterComponent>(SableUI::Colour(51, 51, 51)));
				mainWindow.SetupSplitter("TopHSplitter", 1.0f);

				mainWindow.AddNodeToParent(SableUI::NodeType::COMPONENT, "TopLeftComponent", "TopHSplitter");
				mainWindow.AttachComponentToNode("TopLeftComponent", std::make_unique<SableUI::DefaultComponent>(SableUI::Colour(32, 32, 32)));

				SableUI::Node* vsplitter2 = mainWindow.AddNodeToParent(SableUI::NodeType::VSPLITTER, "NestedVSplitter", "TopHSplitter");
				if (vsplitter2)
				{
					mainWindow.AttachComponentToNode("NestedVSplitter", std::make_unique<SableUI::SplitterComponent>(SableUI::Colour(51, 51, 51)));
					mainWindow.SetupSplitter("NestedVSplitter", 1.0f);

					mainWindow.AddNodeToParent(SableUI::NodeType::COMPONENT, "NestedTopComponent", "NestedVSplitter");
					mainWindow.AttachComponentToNode("NestedTopComponent", std::make_unique<SableUI::DefaultComponent>(SableUI::Colour(32, 32, 32)));

					SableUI::Node* hsplitter2 = mainWindow.AddNodeToParent(SableUI::NodeType::HSPLITTER, "NestedHSplitter", "NestedVSplitter");
					if (hsplitter2)
					{
						mainWindow.AttachComponentToNode("NestedHSplitter", std::make_unique<SableUI::SplitterComponent>(SableUI::Colour(51, 51, 51)));
						mainWindow.SetupSplitter("NestedHSplitter", 1.0f);

						mainWindow.AddNodeToParent(SableUI::NodeType::COMPONENT, "NestedBottomLeftComponent", "NestedHSplitter");
						mainWindow.AttachComponentToNode("NestedBottomLeftComponent", std::make_unique<SableUI::DefaultComponent>(SableUI::Colour(32, 32, 32)));

						mainWindow.AddNodeToParent(SableUI::NodeType::COMPONENT, "NestedBottomRightComponent", "NestedHSplitter");
						mainWindow.AttachComponentToNode("NestedBottomRightComponent", std::make_unique<SableUI::DefaultComponent>(SableUI::Colour(32, 32, 32)));
					}
				}
			}

			mainWindow.AddNodeToParent(SableUI::NodeType::COMPONENT, "MainBottomComponent", "MainVSplitter");
			mainWindow.AttachComponentToNode("MainBottomComponent", std::make_unique<SableUI::DefaultComponent>(SableUI::Colour(32, 32, 32)));
		}

		// Right side of RootHSplitter: A brand new VSplitter branch
		SableUI::Node* rightVSplitter = mainWindow.AddNodeToParent(SableUI::NodeType::VSPLITTER, "RightVSplitter", "RootHSplitter");
		if (rightVSplitter)
		{
			mainWindow.AttachComponentToNode("RightVSplitter", std::make_unique<SableUI::SplitterComponent>(SableUI::Colour(51, 51, 51)));
			mainWindow.SetupSplitter("RightVSplitter", 1.0f);

			// Component at the top of the right VSplitter
			mainWindow.AddNodeToParent(SableUI::NodeType::COMPONENT, "RightTopComponent", "RightVSplitter");
			mainWindow.AttachComponentToNode("RightTopComponent", std::make_unique<SableUI::DefaultComponent>(SableUI::Colour(40, 40, 40)));

			// Component at the bottom of the right VSplitter
			mainWindow.AddNodeToParent(SableUI::NodeType::COMPONENT, "RightBottomComponent", "RightVSplitter");
			mainWindow.AttachComponentToNode("RightBottomComponent", std::make_unique<SableUI::DefaultComponent>(SableUI::Colour(40, 40, 40)));
		}
	}

	// --- Adding Elements to Components ---

	// TopLeftComponent: Mix of RECT, IMAGE, TEXT, and DIVs
	{
		SableUI::ElementInfo info{};

		// A fixed-height DIV at the top
		info.name = "TopDiv_TopLeft";
		info.hType = SableUI::RectType::FIT_CONTENT;
		info.bgColour = SableUI::Colour(60, 60, 60);
		info.padding = 4.0f;
		SableUI::Element* topDiv = mainWindow.AddElementToComponent("TopLeftComponent", info, SableUI::ElementType::RECT);
		if (topDiv)
		{
			info.name = "TopDivText";
			SableUI::Element* textEl = mainWindow.AddElementToElement(topDiv->name, info, SableUI::ElementType::TEXT);
			textEl->SetText(U"Top Bar Content", 16);
		}

		SableUI::ElementInfo el1{};
		el1.name = "element 1";
		el1.hType = SableUI::RectType::FIXED;
		el1.height = 20.0f;
		el1.bgColour = SableUI::Colour(255, 0, 0);
		mainWindow.AddElementToComponent("TopLeftComponent", el1, SableUI::ElementType::RECT);

		SableUI::ElementInfo el2{};
		el2.name = "element 2";
		el2.bgColour = SableUI::Colour(255, 0, 255);
		el2.padding = 5.0f;
		mainWindow.AddElementToComponent("TopLeftComponent", el2, SableUI::ElementType::RECT);

		info.name = "ImageContainerDiv";
		info.wType = SableUI::RectType::FIT_CONTENT;
		info.hType = SableUI::RectType::FIT_CONTENT;
		info.bgColour = SableUI::Colour(45, 45, 45);
		info.padding = 5.0f;
		info.centerX = true;
		info.layoutDirection = SableUI::LayoutDirection::HORIZONTAL;

		SableUI::Element* imgDiv = mainWindow.AddElementToComponent("TopLeftComponent", info, SableUI::ElementType::RECT);
		if (imgDiv)
		{
			SableUI::ElementInfo imgInfo{};
			imgInfo.wType = SableUI::RectType::FIXED;
			imgInfo.hType = SableUI::RectType::FIXED;
			imgInfo.padding = 5.0f;
			imgInfo.centerX = true; // Centered images
			imgInfo.width = 120.0f;
			imgInfo.height = 120.0f;

			SableUI::Element* imageElement = mainWindow.AddElementToElement(imgDiv->name, imgInfo, SableUI::ElementType::IMAGE);
			imageElement->SetImage("dirtywork.jpg");

			SableUI::Element* imageElement1 = mainWindow.AddElementToElement(imgDiv->name, imgInfo, SableUI::ElementType::IMAGE);
			imageElement1->SetImage("bomb.webp");
		}

		SableUI::ElementInfo el5{};
		SableUI::Element* textElement1 = mainWindow.AddElementToComponent("TopLeftComponent", el5, SableUI::ElementType::TEXT);
		textElement1->SetText(U"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. | (#♥) | (＜★) | 이브 프시케 カタカナ 漢字 ひらがな พยัญชนะ 汉字 स्वर äöüçñæ 生而平等 ¿ 😔", 14);
	}

	// NestedTopComponent: A simple DIV with text, now also with a nested fixed-size rect
	{
		SableUI::ElementInfo info{};
		info.name = "NestedTopDiv";
		info.bgColour = SableUI::Colour(50, 50, 50);
		info.padding = 10.0f;
		info.hType = SableUI::RectType::FILL;
		SableUI::Element* nestedTopDiv = mainWindow.AddElementToComponent("NestedTopComponent", info, SableUI::ElementType::RECT);
		if (nestedTopDiv)
		{
			info.name = "NestedTopDivText";
			info.hType = SableUI::RectType::FIT_CONTENT;
			SableUI::Element* textEl = mainWindow.AddElementToElement(nestedTopDiv->name, info, SableUI::ElementType::TEXT);
			textEl->SetText(U"Nested Top Content", 18);

			info.name = "SmallFixedRect";
			info.wType = SableUI::RectType::FIXED;
			info.hType = SableUI::RectType::FIXED;
			info.width = 50.0f;
			info.height = 50.0f;
			info.bgColour = SableUI::Colour(0, 150, 0);
			info.centerX = true;
			info.padding = 0.0f;
			mainWindow.AddElementToElement(nestedTopDiv->name, info, SableUI::ElementType::RECT);
		}
	}

	// NestedBottomLeftComponent: Multiple DIVs and a button (RECT with text), now with more dynamic content
	{
		SableUI::ElementInfo info{};
		info.hType = SableUI::RectType::FIT_CONTENT;
		info.bgColour = SableUI::Colour(70, 70, 70);
		info.padding = 5.0f;

		SableUI::Element* headerDiv = mainWindow.AddElementToComponent("NestedBottomLeftComponent", info, SableUI::ElementType::RECT);
		if (headerDiv)
		{
			info.name = "HeaderDivText";
			SableUI::Element* textEl = mainWindow.AddElementToElement(headerDiv->name, info, SableUI::ElementType::TEXT);
			textEl->SetText(U"User Controls", 16);
		}

		info.name = "ButtonDiv";
		info.wType = SableUI::RectType::FIT_CONTENT;
		info.width = 150.0f;
		info.bgColour = SableUI::Colour(0, 120, 215); // Blue button
		info.padding = 5.0f;
		info.centerX = true;
		info.centerY = false;
		SableUI::Element* buttonDiv = mainWindow.AddElementToComponent("NestedBottomLeftComponent", info, SableUI::ElementType::RECT);
		if (buttonDiv)
		{
			info.name = "ButtonText";
			SableUI::Element* textEl = mainWindow.AddElementToElement(buttonDiv->name, info, SableUI::ElementType::TEXT);
			textEl->SetText(U"Click Me", 14);
		}

		// A fill div with more content
		info.name = "FillDiv_NestedBottomLeft";
		info.hType = SableUI::RectType::FIT_CONTENT;
		info.bgColour = SableUI::Colour(40, 40, 40);
		info.padding = 10.0f;
		SableUI::Element* fillDivNBL = mainWindow.AddElementToComponent("NestedBottomLeftComponent", info, SableUI::ElementType::RECT);
		if (fillDivNBL)
		{
			info.name = "ContentTextNBL";
			SableUI::Element* textEl = mainWindow.AddElementToElement(fillDivNBL->name, info, SableUI::ElementType::TEXT);
			textEl->SetText(U"This is some dynamic content inside the bottom-left pane. It should expand and contract with the window.", 12);

			info.name = "AnotherFixedDivNBL";
			info.wType = SableUI::RectType::FIXED;
			info.hType = SableUI::RectType::FIXED;
			info.width = 80.0f;
			info.height = 25.0f;
			info.bgColour = SableUI::Colour(200, 100, 0);
			info.centerX = true;
			info.padding = 2.0f;
			SableUI::Element* anotherDiv = mainWindow.AddElementToElement(fillDivNBL->name, info, SableUI::ElementType::RECT);
			if (anotherDiv)
			{
				info.name = "AnotherFixedDivTextNBL";
				SableUI::Element* textEl = mainWindow.AddElementToElement(anotherDiv->name, info, SableUI::ElementType::TEXT);
				textEl->SetText(U"Fixed Item", 10);
			}
		}
	}

	// NestedBottomRightComponent: Nested DIVs with various backgrounds
	{
		SableUI::ElementInfo info{};

		// Outer DIV
		info.name = "OuterDiv_NestedBottomRight";
		info.bgColour = SableUI::Colour(20, 20, 20);
		info.padding = 15.0f;
		SableUI::Element* outerDiv = mainWindow.AddElementToComponent("NestedBottomRightComponent", info, SableUI::ElementType::RECT);

		if (outerDiv)
		{
			// Inner DIV 1 (fixed size)
			info.name = "InnerDiv1";
			info.wType = SableUI::RectType::FIXED;
			info.hType = SableUI::RectType::FIXED;
			info.width = 200.0f;
			info.height = 100.0f;
			info.bgColour = SableUI::Colour(80, 80, 80);
			info.padding = 10.0f;
			info.centerX = true;
			SableUI::Element* innerDiv1 = mainWindow.AddElementToElement(outerDiv->name, info, SableUI::ElementType::RECT);
			if (innerDiv1)
			{
				info.name = "InnerDiv1Text";
				SableUI::Element* textEl = mainWindow.AddElementToElement(innerDiv1->name, info, SableUI::ElementType::TEXT);
				textEl->SetText(U"Fixed Size Div", 16);
			}

			// Inner DIV 2 (fill size)
			info.name = "InnerDiv2";
			info.bgColour = SableUI::Colour(60, 60, 60);
			info.padding = 10.0f;
			info.wType = SableUI::RectType::FILL;
			info.hType = SableUI::RectType::FILL;
			SableUI::Element* innerDiv2 = mainWindow.AddElementToElement(outerDiv->name, info, SableUI::ElementType::RECT);
			if (innerDiv2)
			{
				info.name = "InnerDiv2Text";
				info.hType = SableUI::RectType::FIT_CONTENT;
				SableUI::Element* textEl = mainWindow.AddElementToElement(innerDiv2->name, info, SableUI::ElementType::TEXT);
				textEl->SetText(U"Flexible Div", 16);

				// Deeply nested DIV inside InnerDiv2
				info.name = "DeepNestedDiv";
				info.wType = SableUI::RectType::FIXED;
				info.hType = SableUI::RectType::FIXED;
				info.width = 80.0f;
				info.height = 80.0f;
				info.bgColour = SableUI::Colour(255, 50, 50);
				info.padding = 5.0f;
				info.centerX = true;
				SableUI::Element* deepDiv = mainWindow.AddElementToElement(innerDiv2->name, info, SableUI::ElementType::RECT);
				if (deepDiv) {
					info.wType = SableUI::RectType::FIT_CONTENT;
					info.hType = SableUI::RectType::FIT_CONTENT;
					info.name = "DeepNestedDivText";
					SableUI::Element* textEl = mainWindow.AddElementToElement(deepDiv->name, info, SableUI::ElementType::TEXT);
					textEl->SetText(U"Deep", 12);
				}
			}
		}
	}

	// MainBottomComponent: A simple div to contain a progress bar (another div) and some text
	{
		SableUI::ElementInfo info{};
		info.name = "ProgressBarContainer";
		info.hType = SableUI::RectType::FIT_CONTENT;
		info.bgColour = SableUI::Colour(40, 40, 40);
		info.padding = 0.0f; // Set padding to 0 for container
		SableUI::Element* progressBarContainer = mainWindow.AddElementToComponent("MainBottomComponent", info, SableUI::ElementType::RECT);

		if (progressBarContainer)
		{
			info.name = "ProgressBar";
			info.hType = SableUI::RectType::FIXED;
			info.height = 40.0f;
			info.wType = SableUI::RectType::FIXED;
			info.width = 400.0f;
			info.bgColour = SableUI::Colour(0, 180, 0);
			info.padding = 0.0f; // No padding for the progress bar
			mainWindow.AddElementToElement(progressBarContainer->name, info, SableUI::ElementType::RECT);
		}

		SableUI::ElementInfo info2{};
		info2.hType = SableUI::RectType::FIT_CONTENT;
		info2.wType = SableUI::RectType::FIXED;
		info2.width = 200.0f;
		info2.bgColour = SableUI::Colour(50, 50, 50);
		SableUI::Element* textParent = mainWindow.AddElementToComponent("MainBottomComponent", info2, SableUI::ElementType::RECT);
		if (textParent)
		{
			info2.name = "ProgressBarText";
			SableUI::Element* textEl = mainWindow.AddElementToElement(textParent->name, info2, SableUI::ElementType::TEXT);
			textEl->SetText(U"Progress: 50%", 16);
		}
	}

	// --- New Elements for RightTopComponent (top-right pane) ---
	{
		// --- Header Section ---
		SableUI::ElementInfo headerInfo{}; // Always create a fresh info struct for each new element or section
		headerInfo.name = "RightTopHeader";
		headerInfo.hType = SableUI::RectType::FIT_CONTENT;
		headerInfo.bgColour = SableUI::Colour(70, 70, 90);
		headerInfo.padding = 10.0f;
		headerInfo.layoutDirection = SableUI::LayoutDirection::HORIZONTAL; // Set layout for header's potential children

		SableUI::Element* header = mainWindow.AddElementToComponent("RightTopComponent", headerInfo, SableUI::ElementType::RECT);
		if (header)
		{
			SableUI::ElementInfo headerTextInfo{}; // New info for the text element
			headerTextInfo.name = "RightTopHeaderText";
			// Text element usually has FIT_CONTENT for width/height by default, or FILL if it should expand.
			// For a header, FILL is often appropriate if it needs to occupy all available space.
			headerTextInfo.wType = SableUI::RectType::FILL;
			headerTextInfo.hType = SableUI::RectType::FILL;
			headerTextInfo.padding = 0.0f; // Text often has padding on the parent, not itself
			headerTextInfo.centerY = true; // Vertically center text in the header
			headerTextInfo.centerX = true; // Horizontally center text in the header if its parent is fixed/fill

			SableUI::Element* textEl = mainWindow.AddElementToElement(header->name, headerTextInfo, SableUI::ElementType::TEXT);
			if (textEl)
			{
				textEl->SetText(U"SableUI Settings & Dashboard", 22); // Larger font for a main header
			}
		}

		// --- Main Settings Container (Horizontal layout for side-by-side sections) ---
		SableUI::ElementInfo settingsContainerInfo{};
		settingsContainerInfo.name = "SettingsContainer";
		settingsContainerInfo.bgColour = SableUI::Colour(35, 35, 35);
		settingsContainerInfo.layoutDirection = SableUI::LayoutDirection::HORIZONTAL; // This is key for side-by-side
		settingsContainerInfo.hType = SableUI::RectType::FILL; // Let it fill remaining height
		settingsContainerInfo.wType = SableUI::RectType::FILL; // Let it fill remaining width
		settingsContainerInfo.padding = 10.0f; // Padding around the entire settings area

		SableUI::Element* settingsDiv = mainWindow.AddElementToComponent("RightTopComponent", settingsContainerInfo, SableUI::ElementType::RECT);
		if (settingsDiv)
		{
			// --- Left Column: General Settings (Vertical Layout) ---
			SableUI::ElementInfo leftColumnInfo{};
			leftColumnInfo.name = "GeneralSettingsColumn";
			leftColumnInfo.wType = SableUI::RectType::FILL; // This column fills its parent's width (settingsContainerInfo)
			leftColumnInfo.hType = SableUI::RectType::FIT_CONTENT; // This column fills its parent's height
			leftColumnInfo.bgColour = SableUI::Colour(40, 40, 50); // Slightly different background
			leftColumnInfo.padding = 15.0f;
			leftColumnInfo.layoutDirection = SableUI::LayoutDirection::VERTICAL; // Children will stack vertically

			SableUI::Element* leftColumn = mainWindow.AddElementToElement(settingsDiv->name, leftColumnInfo, SableUI::ElementType::RECT);
			if (leftColumn)
			{
				// Sub-header for Left Column
				SableUI::ElementInfo subHeaderInfo{};
				subHeaderInfo.name = "GeneralSettingsHeader";
				subHeaderInfo.hType = SableUI::RectType::FIT_CONTENT;
				subHeaderInfo.bgColour = SableUI::Colour(50, 50, 60);
				subHeaderInfo.padding = 5.0f;
				SableUI::Element* subHeader = mainWindow.AddElementToElement(leftColumn->name, subHeaderInfo, SableUI::ElementType::RECT);
				if (subHeader)
				{
					SableUI::ElementInfo subHeaderTextInfo{};
					subHeaderTextInfo.name = "GeneralSettingsHeaderText";
					subHeaderTextInfo.wType = SableUI::RectType::FILL;
					subHeaderTextInfo.hType = SableUI::RectType::FILL;
					subHeaderTextInfo.centerY = true;
					SableUI::Element* textEl = mainWindow.AddElementToElement(subHeader->name, subHeaderTextInfo, SableUI::ElementType::TEXT);
					if (textEl) textEl->SetText(U"General Options", 16);
				}

				// Setting 1: Checkbox (Horizontal layout within itself)
				SableUI::ElementInfo setting1Info{};
				setting1Info.name = "EnableFeatureASetting";
				setting1Info.hType = SableUI::RectType::FIXED;
				setting1Info.height = 50;
				setting1Info.bgColour = SableUI::Colour(45, 45, 55);
				setting1Info.padding = 5.0f;
				setting1Info.layoutDirection = SableUI::LayoutDirection::HORIZONTAL; // Checkbox and text side-by-side

				SableUI::Element* setting1 = mainWindow.AddElementToElement(leftColumn->name, setting1Info, SableUI::ElementType::RECT);
				if (setting1)
				{
					// Checkbox visual (fixed size)
					SableUI::ElementInfo checkboxInfo{};
					checkboxInfo.name = "CheckboxIcon1";
					checkboxInfo.wType = SableUI::RectType::FIXED;
					checkboxInfo.hType = SableUI::RectType::FIXED;
					checkboxInfo.width = 20;
					checkboxInfo.height = 20;
					checkboxInfo.bgColour = SableUI::Colour(100, 100, 100); // Unchecked color
					checkboxInfo.centerY = true; // Center vertically within the setting row
					SableUI::Element* checkbox = mainWindow.AddElementToElement(setting1->name, checkboxInfo, SableUI::ElementType::RECT);
					if (checkbox)
					{
						// Inner "check" mark (example for a checked state)
						SableUI::ElementInfo checkMarkInfo{};
						checkMarkInfo.name = "CheckMark1";
						checkMarkInfo.wType = SableUI::RectType::FIXED; // Fixed size relative to checkbox
						checkMarkInfo.hType = SableUI::RectType::FIXED;
						checkMarkInfo.width = 10;
						checkMarkInfo.height = 10;
						checkMarkInfo.bgColour = SableUI::Colour(0, 200, 0); // Green if checked
						checkMarkInfo.centerX = true; // Center within the checkbox
						checkMarkInfo.centerY = true;
						mainWindow.AddElementToElement(checkbox->name, checkMarkInfo, SableUI::ElementType::RECT);
					}

					// Checkbox Label Text
					SableUI::ElementInfo settingTextInfo{};
					settingTextInfo.name = "FeatureAText";
					settingTextInfo.wType = SableUI::RectType::FILL; // Text fills remaining width
					settingTextInfo.hType = SableUI::RectType::FILL; // Text fills remaining height
					settingTextInfo.padding = 0.0f;
					settingTextInfo.xOffset = 5.0f; // Small horizontal offset from checkbox
					settingTextInfo.centerY = true;

					SableUI::Element* textEl = mainWindow.AddElementToElement(setting1->name, settingTextInfo, SableUI::ElementType::TEXT);
					if (textEl) textEl->SetText(U"Enable Advanced Features", 14);
				}

				// Setting 2: Text input field (e.g., for username)
				SableUI::ElementInfo setting2Info{};
				setting2Info.name = "UsernameSetting";
				setting2Info.hType = SableUI::RectType::FIT_CONTENT;
				setting2Info.bgColour = SableUI::Colour(45, 45, 55);
				setting2Info.padding = 5.0f;
				setting2Info.layoutDirection = SableUI::LayoutDirection::HORIZONTAL; // Label and input side-by-side

				SableUI::Element* setting2 = mainWindow.AddElementToElement(leftColumn->name, setting2Info, SableUI::ElementType::RECT);
				if (setting2)
				{
					// Label for input
					SableUI::ElementInfo labelInfo{};
					labelInfo.name = "UsernameLabel";
					labelInfo.wType = SableUI::RectType::FIXED;
					labelInfo.width = 80.0f; // Fixed width for label
					labelInfo.hType = SableUI::RectType::FILL;
					labelInfo.centerY = true;
					SableUI::Element* label = mainWindow.AddElementToElement(setting2->name, labelInfo, SableUI::ElementType::TEXT);
					if (label) label->SetText(U"Username:", 14);

					// Input field background
					SableUI::ElementInfo inputBgInfo{};
					inputBgInfo.name = "UsernameInputField";
					inputBgInfo.hType = SableUI::RectType::FIT_CONTENT;
					inputBgInfo.bgColour = SableUI::Colour(60, 60, 70); // Darker background for input area
					SableUI::Element* inputField = mainWindow.AddElementToElement(setting2->name, inputBgInfo, SableUI::ElementType::RECT);
					if (inputField)
					{
						// Placeholder/Current Text in input field
						SableUI::ElementInfo inputTextInfo{};
						inputTextInfo.name = "UsernameInputText";
						inputTextInfo.hType = SableUI::RectType::FIT_CONTENT;
						inputTextInfo.centerY = true;
						SableUI::Element* inputText = mainWindow.AddElementToElement(inputField->name, inputTextInfo, SableUI::ElementType::TEXT);
						if (inputText) inputText->SetText(U"Enter username...", 14);
					}
				}
				// More settings...
			}

			// --- Right Column: Status & Info (Vertical Layout) ---
			SableUI::ElementInfo rightColumnInfo{};
			rightColumnInfo.name = "StatusInfoColumn";
			rightColumnInfo.wType = SableUI::RectType::FIXED; // Fixed width for this column, so Left Column can take FILL
			rightColumnInfo.width = 150.0f; // Example fixed width
			rightColumnInfo.hType = SableUI::RectType::FILL;
			rightColumnInfo.bgColour = SableUI::Colour(50, 40, 40); // Different background for distinction
			rightColumnInfo.padding = 15.0f;
			rightColumnInfo.layoutDirection = SableUI::LayoutDirection::VERTICAL;

			SableUI::Element* rightColumn = mainWindow.AddElementToElement(settingsDiv->name, rightColumnInfo, SableUI::ElementType::RECT);
			if (rightColumn)
			{
				// Sub-header for Right Column
				SableUI::ElementInfo subHeaderInfo{};
				subHeaderInfo.name = "StatusInfoHeader";
				subHeaderInfo.hType = SableUI::RectType::FIT_CONTENT;
				subHeaderInfo.bgColour = SableUI::Colour(60, 50, 50);
				subHeaderInfo.padding = 5.0f;
				SableUI::Element* subHeader = mainWindow.AddElementToElement(rightColumn->name, subHeaderInfo, SableUI::ElementType::RECT);
				if (subHeader)
				{
					SableUI::ElementInfo subHeaderTextInfo{};
					subHeaderTextInfo.name = "StatusInfoHeaderText";
					subHeaderTextInfo.wType = SableUI::RectType::FILL;
					subHeaderTextInfo.hType = SableUI::RectType::FILL;
					subHeaderTextInfo.centerY = true;
					SableUI::Element* textEl = mainWindow.AddElementToElement(subHeader->name, subHeaderTextInfo, SableUI::ElementType::TEXT);
					if (textEl) textEl->SetText(U"System Status", 16);
				}

				// Status Icon (Image)
				SableUI::ElementInfo statusIconInfo{};
				statusIconInfo.name = "StatusImage";
				statusIconInfo.wType = SableUI::RectType::FIXED;
				statusIconInfo.hType = SableUI::RectType::FIXED;
				statusIconInfo.width = 60.0f;
				statusIconInfo.height = 60.0f;
				statusIconInfo.centerX = true; // Center image horizontally
				statusIconInfo.yOffset = 10.0f; // Small offset from previous element
				SableUI::Element* statusImage = mainWindow.AddElementToElement(rightColumn->name, statusIconInfo, SableUI::ElementType::IMAGE);
				if (statusImage)
				{
					statusImage->SetImage("junior.jpg"); // Assuming you have an icon image
				}

				// Status Text
				SableUI::ElementInfo statusTextInfo{};
				statusTextInfo.name = "CurrentStatusText";
				statusTextInfo.wType = SableUI::RectType::FILL;
				statusTextInfo.hType = SableUI::RectType::FIT_CONTENT; // Text fits its content
				statusTextInfo.padding = 5.0f;
				statusTextInfo.yOffset = 5.0f;
				SableUI::Element* statusText = mainWindow.AddElementToElement(rightColumn->name, statusTextInfo, SableUI::ElementType::TEXT);
				if (statusText)
				{
					statusText->SetText(U"All Systems Nominal", 14);
				}

				// Spacer (Empty RECT to push content)
				SableUI::ElementInfo spacerInfo{};
				spacerInfo.name = "Spacer";
				spacerInfo.hType = SableUI::RectType::FILL; // This spacer takes up all remaining vertical space
				spacerInfo.bgColour = SableUI::Colour(0, 0, 0, 0); // Transparent
				mainWindow.AddElementToElement(rightColumn->name, spacerInfo, SableUI::ElementType::RECT);


				// Footer (version info, etc.)
				SableUI::ElementInfo footerInfo{};
				footerInfo.name = "VersionFooter";
				footerInfo.hType = SableUI::RectType::FIT_CONTENT;
				footerInfo.bgColour = SableUI::Colour(60, 50, 50);
				footerInfo.padding = 5.0f;
				SableUI::Element* footer = mainWindow.AddElementToElement(rightColumn->name, footerInfo, SableUI::ElementType::RECT);
				if (footer)
				{
					SableUI::ElementInfo footerTextInfo{};
					footerTextInfo.name = "VersionText";
					footerTextInfo.wType = SableUI::RectType::FIT_CONTENT;
					footerTextInfo.hType = SableUI::RectType::FIT_CONTENT;
					footerTextInfo.centerY = true;
					SableUI::Element* textEl = mainWindow.AddElementToElement(footer->name, footerTextInfo, SableUI::ElementType::TEXT);
					if (textEl) textEl->SetText(U"Ver 1.0.0", 12);
				}
			}
		}
	}

	// --- New Elements for RightBottomComponent (bottom-right pane) ---
	{
		SableUI::ElementInfo info{};
		info.name = "ConsoleOutputHeader";
		info.hType = SableUI::RectType::FIT_CONTENT;
		info.bgColour = SableUI::Colour(80, 60, 60);
		SableUI::Element* header = mainWindow.AddElementToComponent("RightBottomComponent", info, SableUI::ElementType::RECT);
		if (header)
		{
			info.name = "ConsoleOutputHeaderText";
			SableUI::Element* textEl = mainWindow.AddElementToElement(header->name, info, SableUI::ElementType::TEXT);
			textEl->SetText(U"Console Output", 18);
		}

		info.name = "ConsoleLogDiv";
		info.bgColour = SableUI::Colour(15, 15, 15);
		info.hType = SableUI::RectType::FILL;
		SableUI::Element* consoleLogDiv = mainWindow.AddElementToComponent("RightBottomComponent", info, SableUI::ElementType::RECT);
		if (consoleLogDiv)
		{
			info.hType = SableUI::RectType::UNDEF;
			// Multiple log lines
			info.name = "LogLine1";
			SableUI::Element* log1 = mainWindow.AddElementToElement(consoleLogDiv->name, info, SableUI::ElementType::TEXT);
			log1->SetText(U"[INFO] Application started successfully.", 12, 1.0f);

			info.name = "LogLine2";
			SableUI::Element* log2 = mainWindow.AddElementToElement(consoleLogDiv->name, info, SableUI::ElementType::TEXT);
			log2->SetText(U"[WARN] Resource 'texture.png' not found, using default.", 12, 1.0f);

			info.name = "LogLine3";
			SableUI::Element* log3 = mainWindow.AddElementToElement(consoleLogDiv->name, info, SableUI::ElementType::TEXT);
			log3->SetText(U"[ERROR] Failed to connect to server: Connection timed out.", 12, 1.0f);

			info.name = "LogLine4";
			SableUI::Element* log4 = mainWindow.AddElementToElement(consoleLogDiv->name, info, SableUI::ElementType::TEXT);
			log4->SetText(U"[DEBUG] User input processed. Render loop active. FPS: 60.", 12, 1.0f);
		}
	}

	// --- Main Loop ---
	while (mainWindow.PollEvents())
	{
		mainWindow.Draw();
	}

	return 0;
}